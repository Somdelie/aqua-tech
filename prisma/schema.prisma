generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String
  email         String     @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  firstName     String
  lastName      String
  role          Role       @default(USER)
  Cart          Cart?
  Order         Order[]
  Review        Review[]
  Wishlist      Wishlist[]
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model ProductCategory {
  id          String            @id @default(cuid())
  name        String            @unique
  slug        String            @unique
  description String?
  image       String?
  parentId    String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  products    Product[]
  parent      ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    ProductCategory[] @relation("CategoryHierarchy")
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  logo        String?
  website     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id                String           @id @default(cuid())
  slug              String           @unique
  name              String
  description       String?
  shortDescription  String?
  price             Float
  originalPrice     Float?
  costPrice         Float?
  thumbnail         String?
  images            String[]
  stock             Int              @default(0)
  lowStockThreshold Int              @default(5)
  discount          Float            @default(0)
  isAvailable       Boolean          @default(true)
  isFeatured        Boolean          @default(false)
  isPreOwned        Boolean          @default(false)
  specifications    Json?
  weight            Float?
  dimensions        String?
  color             String?
  condition         ProductCondition @default(NEW)
  warrantyMonths    Int              @default(12)
  metaTitle         String?
  metaDescription   String?
  keywords          String[]
  type              ProductType
  categoryId        String
  brandId           String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  cartItems         CartItem[]
  orderItems        OrderItem[]
  brand             Brand            @relation(fields: [brandId], references: [id])
  category          ProductCategory  @relation(fields: [categoryId], references: [id])
  productVariants   ProductVariant[]
  reviews           Review[]
  wishlists         Wishlist[]

  @@index([categoryId])
  @@index([brandId])
  @@index([type])
  @@index([isAvailable])
  @@index([isFeatured])
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  name      String
  value     String
  price     Float?
  stock     Int     @default(0)
  sku       String? @unique
  isDefault Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, name, value])
}

model Review {
  id         String   @id @default(cuid())
  productId  String
  userId     String
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Order {
  id                String         @id @default(cuid())
  orderNumber       String         @unique
  userId            String
  subtotal          Float
  taxAmount         Float          @default(0)
  shippingAmount    Float          @default(0)
  discountAmount    Float          @default(0)
  totalAmount       Float
  status            OrderStatus    @default(PENDING)
  paymentStatus     PaymentStatus  @default(PENDING)
  shippingStatus    ShippingStatus @default(NOT_SHIPPED)
  shippingAddress   Json?
  billingAddress    Json?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  customerNotes     String?
  internalNotes     String?
  trackingNumber    String?
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items             OrderItem[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum ProductType {
  MOBILE_PHONE
  TABLET
  LAPTOP
  DESKTOP
  MONITOR
  TV
  TV_BOX
  SMARTWATCH
  ROUTER
  CHARGER
  MOUSE
  KEYBOARD
  HEADPHONES
  SPEAKERS
  CAMERA
  GAMING_CONSOLE
  ACCESSORY
  OTHER
}

enum ProductCondition {
  NEW
  EXCELLENT
  GOOD
  FAIR
  POOR
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum ShippingStatus {
  NOT_SHIPPED
  PROCESSING
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  RETURNED
}
